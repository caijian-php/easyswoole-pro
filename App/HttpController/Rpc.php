<?php


namespace App\HttpController;


use EasySwoole\Http\Message\Status;
use Swoole\Exception;

class Rpc extends Controller
{
    protected $key = 'pro';

    protected $timeout = 5;

    protected $namespace = '\App\Rpc\Server';

    protected function onRequest(?string $action): ?bool
    {
        parent::onRequest($action);
        $params = $this->request()->getRequestParam();
        $sign = $this->request()->getHeader('sign')[0] ?? '';
        $uri = $this->request()->getHeader('uri')[0] ?? '';
        $timestamp = $this->request()->getHeader('timestamp')[0] ?? '';

        if(!$sign || !$uri || !$timestamp){
            throw new Exception('缺少检验参数');
        }

        $json = json_encode($params);
        $md5 = md5($json.$timestamp.$uri.$this->key);
        if($sign != $md5){
            throw new Exception('sign无效');
        }

        if($timestamp+$this->timeout < time()){
            throw new Exception('请求已失效');
        }

        $tmp      = array_filter(explode('/', trim($uri, '/')));
        $action    = array_pop($tmp);
        $className = $this->namespace;
        foreach ($tmp as $value) {
            $className .= '\\' . ucfirst($value);
        }

        if (!class_exists($className)) {
            throw new Exception('请求不存在');
        }

        $obj = new $className;
        $result = call_user_func_array([$obj,$action],$params);
        $data = json_encode( [
            'data' => $result
        ]);
        $this->response()->write($data);
        return true;
    }

    protected function onException(\Throwable $throwable): void
    {
        parent::onException($throwable); // TODO: Change the autogenerated stub
        $this->response()->withStatus(Status::CODE_INTERNAL_SERVER_ERROR);
        $this->response()->write($throwable->getMessage());
    }
}